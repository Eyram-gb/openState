/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    OpenState: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "_manufacturer",
              type: "string",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "string",
              name: "newManufacturer",
              type: "string",
            },
          ],
          name: "ManufacturerUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "moderator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "state",
              type: "bool",
            },
          ],
          name: "ModeratorUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "productHash",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "string",
              name: "notes",
              type: "string",
            },
          ],
          name: "ProductNotesUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "productionDate",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiryDate",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "productHash",
                  type: "bytes32",
                },
                {
                  internalType: "string",
                  name: "notes",
                  type: "string",
                },
              ],
              indexed: false,
              internalType: "struct OpenState.Product",
              name: "product",
              type: "tuple",
            },
          ],
          name: "ProductRegistered",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
          ],
          name: "checkAuthenticity",
          outputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "productionDate",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiryDate",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "productHash",
                  type: "bytes32",
                },
                {
                  internalType: "string",
                  name: "notes",
                  type: "string",
                },
              ],
              internalType: "struct OpenState.Product",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
          ],
          name: "getHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [],
          name: "manufacturer",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_name",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "_productionDate",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_expiryDate",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "_productHash",
              type: "bytes32",
            },
            {
              internalType: "string",
              name: "_notes",
              type: "string",
            },
          ],
          name: "registerProduct",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_newManufacturer",
              type: "string",
            },
          ],
          name: "updateManufacturer",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_moderator",
              type: "address",
            },
            {
              internalType: "bool",
              name: "_state",
              type: "bool",
            },
          ],
          name: "updateModerator",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
            {
              internalType: "string",
              name: "_notes",
              type: "string",
            },
          ],
          name: "updateProductNotes",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
  11155111: {
    OpenState: {
      address: "0xfFA3c87f7Dce87c92577F3D911CF2690BFC6c1D7",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "_manufacturer",
              type: "string",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "string",
              name: "newManufacturer",
              type: "string",
            },
          ],
          name: "ManufacturerUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "moderator",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "state",
              type: "bool",
            },
          ],
          name: "ModeratorUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "bytes32",
              name: "productHash",
              type: "bytes32",
            },
            {
              indexed: false,
              internalType: "string",
              name: "notes",
              type: "string",
            },
          ],
          name: "ProductNotesUpdated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "productionDate",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiryDate",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "productHash",
                  type: "bytes32",
                },
                {
                  internalType: "string",
                  name: "notes",
                  type: "string",
                },
              ],
              indexed: false,
              internalType: "struct OpenState.Product",
              name: "product",
              type: "tuple",
            },
          ],
          name: "ProductRegistered",
          type: "event",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
          ],
          name: "checkAuthenticity",
          outputs: [
            {
              components: [
                {
                  internalType: "string",
                  name: "name",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "productionDate",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "expiryDate",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "productHash",
                  type: "bytes32",
                },
                {
                  internalType: "string",
                  name: "notes",
                  type: "string",
                },
              ],
              internalType: "struct OpenState.Product",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
          ],
          name: "getHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [],
          name: "manufacturer",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_name",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "_productionDate",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_expiryDate",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "_productHash",
              type: "bytes32",
            },
            {
              internalType: "string",
              name: "_notes",
              type: "string",
            },
          ],
          name: "registerProduct",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_newManufacturer",
              type: "string",
            },
          ],
          name: "updateManufacturer",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_moderator",
              type: "address",
            },
            {
              internalType: "bool",
              name: "_state",
              type: "bool",
            },
          ],
          name: "updateModerator",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "_productID",
              type: "string",
            },
            {
              internalType: "string",
              name: "_notes",
              type: "string",
            },
          ],
          name: "updateProductNotes",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
