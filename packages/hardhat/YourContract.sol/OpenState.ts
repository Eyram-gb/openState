/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace OpenState {
  export type ProductStruct = {
    name: string;
    productionDate: BigNumberish;
    expiryDate: BigNumberish;
    productHash: BytesLike;
    notes: string;
  };

  export type ProductStructOutput = [
    name: string,
    productionDate: bigint,
    expiryDate: bigint,
    productHash: string,
    notes: string
  ] & {
    name: string;
    productionDate: bigint;
    expiryDate: bigint;
    productHash: string;
    notes: string;
  };
}

export interface OpenStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAuthenticity"
      | "getHash"
      | "manufacturer"
      | "owner"
      | "registerProduct"
      | "transferOwnership"
      | "updateManufacturer"
      | "updateModerator"
      | "updateProductNotes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ManufacturerUpdated"
      | "ModeratorUpdated"
      | "ProductNotesUpdated"
      | "ProductRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAuthenticity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getHash", values: [string]): string;
  encodeFunctionData(
    functionFragment: "manufacturer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerProduct",
    values: [string, BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManufacturer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateModerator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductNotes",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manufacturer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManufacturer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductNotes",
    data: BytesLike
  ): Result;
}

export namespace ManufacturerUpdatedEvent {
  export type InputTuple = [newManufacturer: string];
  export type OutputTuple = [newManufacturer: string];
  export interface OutputObject {
    newManufacturer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModeratorUpdatedEvent {
  export type InputTuple = [moderator: AddressLike, state: boolean];
  export type OutputTuple = [moderator: string, state: boolean];
  export interface OutputObject {
    moderator: string;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductNotesUpdatedEvent {
  export type InputTuple = [productHash: BytesLike, notes: string];
  export type OutputTuple = [productHash: string, notes: string];
  export interface OutputObject {
    productHash: string;
    notes: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRegisteredEvent {
  export type InputTuple = [product: OpenState.ProductStruct];
  export type OutputTuple = [product: OpenState.ProductStructOutput];
  export interface OutputObject {
    product: OpenState.ProductStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OpenState extends BaseContract {
  connect(runner?: ContractRunner | null): OpenState;
  waitForDeployment(): Promise<this>;

  interface: OpenStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAuthenticity: TypedContractMethod<
    [_productID: string],
    [OpenState.ProductStructOutput],
    "view"
  >;

  getHash: TypedContractMethod<[_productID: string], [string], "view">;

  manufacturer: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerProduct: TypedContractMethod<
    [
      _name: string,
      _productionDate: BigNumberish,
      _expiryDate: BigNumberish,
      _productHash: BytesLike,
      _notes: string
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateManufacturer: TypedContractMethod<
    [_newManufacturer: string],
    [void],
    "nonpayable"
  >;

  updateModerator: TypedContractMethod<
    [_moderator: AddressLike, _state: boolean],
    [void],
    "nonpayable"
  >;

  updateProductNotes: TypedContractMethod<
    [_productID: string, _notes: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAuthenticity"
  ): TypedContractMethod<
    [_productID: string],
    [OpenState.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHash"
  ): TypedContractMethod<[_productID: string], [string], "view">;
  getFunction(
    nameOrSignature: "manufacturer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerProduct"
  ): TypedContractMethod<
    [
      _name: string,
      _productionDate: BigNumberish,
      _expiryDate: BigNumberish,
      _productHash: BytesLike,
      _notes: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateManufacturer"
  ): TypedContractMethod<[_newManufacturer: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateModerator"
  ): TypedContractMethod<
    [_moderator: AddressLike, _state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProductNotes"
  ): TypedContractMethod<
    [_productID: string, _notes: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ManufacturerUpdated"
  ): TypedContractEvent<
    ManufacturerUpdatedEvent.InputTuple,
    ManufacturerUpdatedEvent.OutputTuple,
    ManufacturerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ModeratorUpdated"
  ): TypedContractEvent<
    ModeratorUpdatedEvent.InputTuple,
    ModeratorUpdatedEvent.OutputTuple,
    ModeratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductNotesUpdated"
  ): TypedContractEvent<
    ProductNotesUpdatedEvent.InputTuple,
    ProductNotesUpdatedEvent.OutputTuple,
    ProductNotesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProductRegistered"
  ): TypedContractEvent<
    ProductRegisteredEvent.InputTuple,
    ProductRegisteredEvent.OutputTuple,
    ProductRegisteredEvent.OutputObject
  >;

  filters: {
    "ManufacturerUpdated(string)": TypedContractEvent<
      ManufacturerUpdatedEvent.InputTuple,
      ManufacturerUpdatedEvent.OutputTuple,
      ManufacturerUpdatedEvent.OutputObject
    >;
    ManufacturerUpdated: TypedContractEvent<
      ManufacturerUpdatedEvent.InputTuple,
      ManufacturerUpdatedEvent.OutputTuple,
      ManufacturerUpdatedEvent.OutputObject
    >;

    "ModeratorUpdated(address,bool)": TypedContractEvent<
      ModeratorUpdatedEvent.InputTuple,
      ModeratorUpdatedEvent.OutputTuple,
      ModeratorUpdatedEvent.OutputObject
    >;
    ModeratorUpdated: TypedContractEvent<
      ModeratorUpdatedEvent.InputTuple,
      ModeratorUpdatedEvent.OutputTuple,
      ModeratorUpdatedEvent.OutputObject
    >;

    "ProductNotesUpdated(bytes32,string)": TypedContractEvent<
      ProductNotesUpdatedEvent.InputTuple,
      ProductNotesUpdatedEvent.OutputTuple,
      ProductNotesUpdatedEvent.OutputObject
    >;
    ProductNotesUpdated: TypedContractEvent<
      ProductNotesUpdatedEvent.InputTuple,
      ProductNotesUpdatedEvent.OutputTuple,
      ProductNotesUpdatedEvent.OutputObject
    >;

    "ProductRegistered(tuple)": TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
    ProductRegistered: TypedContractEvent<
      ProductRegisteredEvent.InputTuple,
      ProductRegisteredEvent.OutputTuple,
      ProductRegisteredEvent.OutputObject
    >;
  };
}
